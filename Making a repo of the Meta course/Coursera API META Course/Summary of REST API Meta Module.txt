Well done you've reached the end of this module about RESTful API development. Let's take a few moments to review what you have learned. First you learned about how APIs are used in the real world, from Meta software engineer Celina Florentin, that was useful. Then to lay the foundation for the rest of the course, you had a quick summary of what HTTP and HTTPS aer, in other words, all the basics. Like how HTTP communication requires a client requesting information and a server that responds to the request and serves the content. And that HTTPSs better than HTTP,because data is encrypted on the client and server side. You also got a refresher about HTTP methods like PUT which you use to update a whole resource. And you were reminded of what HTTP requests and responses are, as well as the most commonly used status codes. Following this you learned about RESTfulness naming conventions and essential tools for API development. First you learned that REST is an architectural style for designing APIs for a project. And that you can only say that an API is RESTful if specific constraints are met. For example, REST APIs are always stateless. This means that the server cannot identify who is making the request or what their previously requested data was without proper user information. After this, you learned why a consistent naming convention is so important when it comes to APIs. Remember, your endpoints have to communicate their purpose to help you and other developers who might work on your projects. And there are some technical requirements too like that you should use the forward slash to indicate hierarchical relationships and use nouns for resource names, not verbs. Next, you learned about tools that you can use to develop and test APIs. Like Insomnia, which is a powerful free REST API client that has cross-platform versions and a very user-friendly interface. Then you got a chance for some hands-on learning when you completed an exercise about API development tools and how to set up your tools and environment. In the third lesson, you learned more about the principles of API development. This included REST best practices, security, authentication, authorization and access control. Now those were important, just one of those best practices is that you should only support two versions of any resource. Because maintaining multiple versions can be overly complicated, error-prone and costly. You also learned that API security is crucial because they give third party clients access to your databases. And one of the ways you can keep your APIs secure is to use a signed URL to limit access to a resource for a specific period of time. And you can use token-based authentication. So the client's applications don't have to send their user name and password in every call. Next up was access control, which was all about setting roles and privileges for users to make sure only the right people have access to data. And in the last lesson of this module, you learned about everything you should do before and at the start of a project. So you could create your own book list API project that keeps track of books in a bookstore. As part of this lesson, you learned about the project itself, how to organize your own project, as well as about XML and JSON response types. When it comes to organizing your project, it's important to split a big Django app into multiple smaller apps to make it manageable and to make sure you achieve all of your aims. And when you upgrade an API, you should create a separate new app because a new A PI may break the existing app. Finally, in an ungraded lab, you practiced creating your first API, well done. But don't forget creating an API isn't enough, you also have to know how to debug it and that's why you learned how to debug Python scripts from VS Code using the built-in debugging tools. The lesson ended with a video about API mocking and how it can help developers in rapid API development. Mocking API is a great way to imitate a real API endpoint. Developers can use these mock APIs to develop their applications because they provide a similar response. Later, they can switch to the production version of the APIs effortlessly when it is ready. Congratulations you've now covered most of the basic API concepts and you are ready to complete the quiz and review the additional resources for this module. In the next module, you will learn about securing an API in Django REST framework.